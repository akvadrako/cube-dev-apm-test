services:
  db:
    image: postgres:13.3 
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=metrics
    volumes:
      - ./data/db:/var/lib/postgresql/data

  minio:
    image: minio/minio:RELEASE.2023-03-09T23-16-13Z
    environment:
    - MINIO_ROOT_USER=user
    - MINIO_ROOT_PASSWORD=pass
    cmd: ['server', '/data']
    ports: ['9000:9000', '9001:9001']
    volumnes:
      - ./data/minio:/data

  redis:
    image: bitnami/redis:6.2.11
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    #logging: { driver: none }

  # Metric collectors
  collector_1:
    build: ./collector
    env_file: shared.env
    restart: always
    ports:
      - 5000:5000
    depends_on:
      - db
  
  # API instances
  api_1:
    restart: always
    image: cubejs/cube:v0.32.3
    env_file: shared.env
    ports:
      - 4000:4000
      - 3000:3000  # Dashboard app
    environment:
      - CUBEJS_AGENT_ENDPOINT_URL=ws://collector_1
    depends_on:
      - db
      - router
      - redis
    volumes:
      - ./schema:/cube/conf/schema
  # add more API instances here

  # Refresh workers
  refresh_1:
    image: cubejs/cube:v0.32.2
    env_file: shared.env
    environment:
      - CUBEJS_AGENT_ENDPOINT_URL=ws://collector_1
      - CUBEJS_REFRESH_WORKER=true
    volumes:
      - ./schema:/cube/conf/schema
    depends_on:
      - db
      - router
      - redis
  
  # CubeStore Router
  router:
    restart: always
    image: cubejs/cubestore:v0.32.3
    env_file: shared.env
    environment:
      - CUBESTORE_SERVER_NAME=router:9999
      - CUBESTORE_META_PORT=9999
    #volumes:
    #  - ./store:/cube/data

  # CubeStore Workers
  store_1:
    restart: always
    image: cubejs/cubestore:v0.32.3
    env_file: shared.env
    environment:
      - CUBESTORE_SERVER_NAME=store_1:9001
    depends_on:
      - router
    #volumes:
    #  - ./store:/cube/data
